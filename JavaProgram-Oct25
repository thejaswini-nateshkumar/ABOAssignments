Q1 : A group of students are sitting in a circle. The teacher is electing a new class president. The teacher does this by singing a song while walking around the circle. After the song is finished the student at which the teacher stopped is removed from the circle. Starting at the student next to the one that was just removed, the teacher resumes singing and walking around the circle. After the teacher is done singing, the next student is removed. The teacher repeats this until one student is left.
A song of length k will result in the teacher walking past k students on each round. The students are numbered 1 to n. The teacher starts at student 1.
For example, suppose the song length is two(k=2). And there are four students to start with (1,2,3,4). The first student to go would be '2', after that '4', and after that '3’. Student '1' would be the next president in this example.

    n - the number of studexnts sitting in a circle
    k - the length (in students) of each song.

return the number of the student that is elected.

A : class Solution {
  public static void main(String[] args) {
    int n=5;
    int k=3;
    System.out.println(electPresident(n,k));
  }
  static int electPresident(int n, int k){
    List<Integer> students=new ArrayList<>();
    for(int i=1;i<=n;i++){
      students.add(i);
    }
    int index=0;
    while(students.size()>1){
      index = (index + k - 1) % students.size();
      students.remove(index);
    }
    return students.get(0);
  }
}

--------------------------------------------------------------------------------------------------------------------
Q2 : Given an array of integers (positive and negative),
    return length of the loop, if it exists. Else return -1.
    [ Rules for the movement - Index to move to,
        for +ve numbers - (i + arr[i])%n
        for -ve numbers - (i - arr[i])%n ]

Example:
    int[] arr = {2, -1, 1, 2, 2}    
    // Returns 3  [There is a loop in this array because 0 moves to 2, 2 moves to 3, and 3 moves to 0.]

A : class Solution {
  public static void main(String[] args) {
    int[] arr = {2, -1, 1, 2, 2};
    String result = checkLoop(arr);
    System.out.println(result);
  }
  public static String checkLoop(int[] arr) {
    int n = arr.length;
    Set<Integer> visited = new HashSet<>();
    int curr = 0;
    while (true) {
      if (visited.contains(curr)) {
        return "yes";
      }
      if (arr[curr] == 0 || curr == (curr + arr[curr]) % n) {
        return "no";
      }
      visited.add(curr);
      curr = (curr + arr[curr]) % n;
    }
  }  
}
----------------------------------------------------------------------------------------------------------------------------
Q3 : Given an array of integers,
    sort it in a wave form.
    [ The order of elements in a wave form:
       arr[0] >= arr[1] <= arr[2] >= arr[3] <= arr[4] >= ….. ]

Example:
    int[] arr = {10, 5, 6, 3, 2, 20, 100, 80};
    Answer : arr[] = {10, 5, 6, 2, 20, 3, 100, 80} OR {20, 5, 10, 2, 80, 6, 100, 3}

A : class Solution {
  public static int[] waveSort(int[] arr) {
    Arrays.sort(arr);
    for (int i = 0; i < arr.length - 1; i += 2) {
      int temp = arr[i];
      arr[i] = arr[i + 1];
      arr[i + 1] = temp;
    }
    return arr;
  }
  public static void main(String[] args) {
    int[] arr = {10, 5, 6, 3, 2, 20, 100, 80};
    System.out.println(Arrays.toString(waveSort(arr)));
  }
}

----------------------------------------------------------------------------------------------------------------------------------------------
Q4 : Median of two arrays
A : class Solution {
  public static double median(int[] a, int[] b) {
    int n1 = a.length, n2 = b.length;
    if (n1 > n2) return median(b, a);
    int n = n1 + n2; 
    int left = (n1 + n2 + 1) / 2;
    int low = 0, high = n1;
    while (low <= high) {
      int mid1 = (low + high) / 2;
      int mid2 = left - mid1;
      int l1 = (mid1 > 0) ? a[mid1 - 1] : Integer.MIN_VALUE;
      int l2 = (mid2 > 0) ? b[mid2 - 1] : Integer.MIN_VALUE;
      int r1 = (mid1 < n1) ? a[mid1] : Integer.MAX_VALUE;
      int r2 = (mid2 < n2) ? b[mid2] : Integer.MAX_VALUE;
      if (l1 <= r2 && l2 <= r1) {
        if (n % 2 == 1) return Math.max(l1, l2);
        else return ((double) (Math.max(l1, l2) + Math.min(r1, r2))) / 2.0;
      } 
      else if (l1 > r2)
        high = mid1 - 1;
      else 
        low = mid1 + 1;
    }
    return 0;
  }
  public static void main(String[] args) {
    int[] a = {1, 4, 7, 10, 12};
    int[] b = {2, 3, 6, 15};
    System.out.println("The median of two sorted arrays is " + median(a, b));
  }
}
